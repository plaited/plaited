var idiom=key=>(...idioms)=>({[key]:[...idioms]}),waitFor=idiom("waitFor"),block=idiom("block");var dataTarget="data-target",dataTrigger="data-trigger";var trueTypeOf=obj=>Object.prototype.toString.call(obj).slice(8,-1).toLowerCase();var reEscape=/[&<>'"]/g;var escapeObj={"&":"&amp;","<":"&lt;",">":"&gt;","'":"&#39;",'"':"&quot;"};var{replace}="",escape=sub=>replace.call(sub,reEscape,key=>escapeObj[key]);var opacityHex=new Map;for(let i=1;i>=0;i-=.01){i=Math.round(i*100)/100;let hex=(Math.round(i*255)+65536).toString(16).substr(-2).toUpperCase();opacityHex.set(i,hex)}var reduceWhitespace=str=>str.replace(/(\s\s+|\n)/g," "),isTruthy=val=>trueTypeOf(val)==="string"||trueTypeOf(val)==="number",taggedWithPrimitives=(strings,...expressions)=>{let{raw}=strings,result=expressions.reduce((acc,subst,i)=>{acc+=reduceWhitespace(raw[i]);let filteredSubst=Array.isArray(subst)?subst.filter(isTruthy).join(""):isTruthy(subst)?subst:"";return acc.endsWith("$")&&(filteredSubst=escape(filteredSubst),acc=acc.slice(0,-1)),acc+filteredSubst},"");return result+=reduceWhitespace(raw[raw.length-1])};var DelegatedListener=class{constructor(callback){this.callback=callback}handleEvent(evt){this.callback(evt)}},delegates=new WeakMap,delegatedListener=Object.freeze({set:(context,callback)=>{delegates.set(context,new DelegatedListener(callback))},get:context=>delegates.get(context),has:context=>delegates.has(context)});var html=(strings,...expressions)=>taggedWithPrimitives(strings,...expressions).trim().replace(/[\s\n]+>/g,">").replace(/(<.*?)(?:\s+)(\w)|>\s+</g,(_,p1,p2)=>p1?[p1,p2].join(" "):"><").replace(/(>)(?:\s)(\S)|(\S)(?:\s)(<)/g,(_,p1,p2,p3,p4)=>p1?[p1,p2].join(""):[p3,p4].join(""));var wire=obj=>{let attributes=[];for(let prop in obj){let value=obj[prop];if(value!=null){if(prop==="target"){attributes.push(`${dataTarget}="${value}"`);continue}if(prop==="triggers"){attributes.push(`${dataTrigger}="${Object.entries(value).map(([ev,req])=>`${ev}->${req}`).join(" ")}"`);continue}if(prop==="className"){attributes.push(`class="${value}"`);continue}if(prop==="htmlFor"){attributes.push(`for="${value}"`);continue}if(!(!prop.startsWith("aria")&&!value)){if(!prop.startsWith("aria")&&typeof value=="boolean"){attributes.push(html`$${prop}`);continue}attributes.push(html`${prop}="$${value?.toString()}"`)}}}return attributes.join(" ")};var shallowCompare=(obj1,obj2)=>Object.keys(obj1).length===Object.keys(obj2).length&&Object.keys(obj1).every(key=>Object.hasOwn(obj2,key)&&obj1[key]===obj2[key]),template=resultFn=>{let cache=null;function tpl(props){if(cache&&cache.lastThis===this&&shallowCompare(props,cache.lastProps))return cache.lastResult;let lastResult=resultFn.call(this,props);return cache={lastResult,lastProps:props,lastThis:this},lastResult}return tpl.stylesheets=new Set,tpl};var IslandTemplate=template(({tag,template:template2,mode="open",stylesheets,...rest})=>{let sheets=Array.isArray(stylesheets)?[...new Set(stylesheets)]:stylesheets;return html`
  <${tag} ${wire({...rest})}>
    <template shadowroot="${mode}">
      ${stylesheets&&html`<style>${sheets}</style>`}
      ${template2}
    </template>
  </${tag}>
  `});var valueDisplay=IslandTemplate({tag:"value-display",stylesheets:"h1 { color: purple; }",template:html`<h1 data-target="display" class="display" data-trigger="click->test">00:00</h1>`}),keyPad=IslandTemplate({tag:"key-pad",template:html`<div class="keypad">
    <div>
      <button class="number-button" data-trigger="click->number" value="1">1</button>
      <button class="number-button" data-trigger="click->number" value="2">2</button>
      <button class="number-button" data-trigger="click->number" value="3">3</button>
      <button class="number-button" data-trigger="click->number" value="4">4</button>
      <button class="number-button" data-trigger="click->number" value="5">5</button>
      <button class="number-button" data-trigger="click->number" value="6">6</button>
      <button class="number-button" data-trigger="click->number" value="7">7</button>
      <button class="number-button" data-trigger="click->number" value="8">8</button>
      <button class="number-button" data-trigger="click->number" value="9">9</button>
      <button class="number-button" data-trigger="click->number" value="0">0</button>
    </div>
    <button class="clear-button" data-trigger="click->clear">Clear</button>
  </div>`}),CalculatorTemplate=template(()=>html`${valueDisplay}${keyPad}`);var calculator_stories_default={title:"examples/calculator",template:CalculatorTemplate,description:"Example of using Island Template template and workers to exercise the islandly library"},Calculator={description:"a calculator consisting of two islands and worker"};export{Calculator,calculator_stories_default as default};
//# sourceMappingURL=calculator.stories.js.map
