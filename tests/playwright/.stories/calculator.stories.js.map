{
  "version": 3,
  "sources": ["libs/behavioral/rules.ts", "libs/islandly/constants.ts", "libs/utils/true-type-of.ts", "libs/utils/escape-unescape.ts", "libs/utils/opacity-hex.ts", "libs/islandly/utils.ts", "libs/islandly/delegated-listener.ts", "libs/islandly/html.ts", "libs/islandly/wire.ts", "libs/islandly/template.ts", "libs/islandly/island-template.ts", "tests/stories/calculator.template.ts", "tests/stories/calculator.stories.ts"],
  "sourcesContent": ["import { ParameterIdiom, RequestIdiom, RuleSet, RulesFunc } from './types.ts'\n\nconst idiom = (key: 'waitFor' | 'block') =>\n<T = unknown>(\n  ...idioms: ParameterIdiom<T>[]\n) => {\n  return {\n    [key]: [...idioms],\n  }\n}\n\nexport const waitFor = idiom('waitFor')\nexport const block = idiom('block')\n\nexport const request = <T extends { type: string; data: unknown }>(\n  ...idioms: RequestIdiom<T>[]\n) => {\n  return {\n    request: [...idioms],\n  }\n}\n\nexport const delegate = (...gens: RulesFunc[]): RulesFunc =>\n  function* () {\n    for (const gen of gens) {\n      yield* gen()\n    }\n  }\n\nexport const loop = (gen: RulesFunc, assert = () => true) =>\n  function* () {\n    while (assert()) {\n      yield* gen()\n    }\n  }\n\nexport const strand = (...idiomSets: RuleSet[]): RulesFunc =>\n  function* () {\n    for (const set of idiomSets) {\n      yield set\n    }\n  }\n", "export const dataTarget = 'data-target'\nexport const dataTrigger = 'data-trigger'\n", "export const trueTypeOf = (obj?: unknown): string =>\n  Object.prototype.toString.call(obj).slice(8, -1).toLowerCase()\n", "const reEscape = /[&<>'\"]/g\nconst reUnescape = /&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34);/g\nconst escapeObj = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\\'': '&#39;',\n  '\"': '&quot;',\n}\nconst unescapeObj = {\n  '&amp;': '&',\n  '&#38;': '&',\n  '&lt;': '<',\n  '&#60;': '<',\n  '&gt;': '>',\n  '&#62;': '>',\n  '&apos;': '\\'',\n  '&#39;': '\\'',\n  '&quot;': '\"',\n  '&#34;': '\"',\n}\nconst { replace } = ''\n\n/**\n * @desription escapes a string\n * @example\n * escape('&<>\\'\"') => '&amp;&lt;&gt;&#39;&quot;'\n */\nexport const escape = (sub: string) =>\n  replace.call(\n    sub,\n    reEscape,\n    (key) => escapeObj[key as keyof typeof escapeObj],\n  )\n/**\n * @desription unescapes an escaped a string\n * @example\n * unescape('&amp;&lt;&gt;&#39;&quot;') => '&<>\\'\"'\n */\nexport const unescape = (sub: string) =>\n  replace.call(\n    sub,\n    reUnescape,\n    (key) => unescapeObj[key as keyof typeof unescapeObj],\n  )\n", "export const opacityHex = new Map<number, string>()\nfor (let i = 1; i >= 0; i -= 0.01) {\n  i = Math.round(i * 100) / 100\n  const alpha = Math.round(i * 255)\n  const hex = (alpha + 0x10000).toString(16).substr(-2).toUpperCase()\n  opacityHex.set(i, hex)\n}\n", "import { Primitive } from './types.ts'\nimport { escape, trueTypeOf } from '../utils/mod.ts'\n\n// It takes the value of a data-target attribute and return all the events happening in it. minus the method identifier\n// so iof the event was data-target=\"click->doSomething\" it would return [\"click\"]\nexport const matchAllEvents = (str: string) => {\n  const regexp = /(^\\w+|(?:\\s)\\w+)(?:->)/g\n  return [...str.matchAll(regexp)].flatMap(([, event]) => event)\n}\n\n// returns the request/action name to connect our event binding to data-target=\"click->doSomething\" it would return \"doSomething\"\n// note triggers are separated by spaces in the attribute data-target=\"click->doSomething focus->somethingElse\"\nexport const getTriggerKey = (evt: Event) => {\n  const el = evt.currentTarget\n  const type = evt.type\n  const pre = `${type}->`\n  //@ts-ignore: will be HTMLOrSVGElement\n  return el.dataset.trigger\n    .trim()\n    .split(/\\s+/)\n    .find((str: string) => str.includes(pre))\n    .replace(pre, '')\n}\n\n// Takes a list of nodes added when mutation observer change happened and filters our the ones with triggers\nexport const filterAddedNodes = (nodes: NodeList) => {\n  const elements: HTMLElement[] = []\n  nodes.forEach((node) => {\n    if (node instanceof HTMLElement && node.dataset.trigger) elements.push(node)\n  })\n  return elements\n}\n\nconst reduceWhitespace = (str: string) => str.replace(/(\\s\\s+|\\n)/g, ' ')\n\nconst isTruthy = (val: Primitive) =>\n  trueTypeOf(val) === 'string' ||\n  trueTypeOf(val) === 'number'\n\nexport const taggedWithPrimitives = (\n  strings: TemplateStringsArray,\n  ...expressions: Array<Primitive | Primitive[]>\n) => {\n  const { raw } = strings\n  let result = expressions.reduce<string>((acc, subst, i) => {\n    acc += reduceWhitespace(raw[i])\n    let filteredSubst = Array.isArray(subst)\n      ? subst.filter(isTruthy).join('')\n      : isTruthy(subst)\n      ? subst\n      : ''\n    if (acc.endsWith('$')) {\n      filteredSubst = escape(filteredSubst as string)\n      acc = acc.slice(0, -1)\n    }\n    return acc + filteredSubst\n  }, '')\n  return result += reduceWhitespace(raw[raw.length - 1])\n}\n", "/** https://medium.com/@WebReflection/dom-handleevent-a-cross-platform-standard-since-year-2000-5bf17287fd38 */\nclass DelegatedListener {\n  callback: (ev: Event) => void\n  constructor(callback: (ev: Event) => void) {\n    this.callback = callback\n  }\n  handleEvent(evt: Event) {\n    this.callback(evt)\n  }\n}\n\nconst delegates = new WeakMap()\n\nexport const delegatedListener = Object.freeze({\n  set: (context: Element, callback: (ev: Event) => void) => {\n    delegates.set(context, new DelegatedListener(callback))\n  },\n  get: (context: Element) => delegates.get(context),\n  has: (context: Element) => delegates.has(context),\n})\n", "import { taggedWithPrimitives } from './utils.ts'\nimport { Primitive } from './types.ts'\n\n/** @returns a minimized html template string */\nexport const html = (\n  strings: TemplateStringsArray,\n  ...expressions: Array<Primitive | Primitive[]>\n) => {\n  const result = taggedWithPrimitives(strings, ...expressions)\n  const tpl = result\n    .trim()\n    .replace(/[\\s\\n]+>/g, '>')\n    .replace(\n      /(<.*?)(?:\\s+)(\\w)|>\\s+</g,\n      (_, p1, p2) => p1 ? [p1, p2].join(' ') : '><',\n    )\n    .replace(/(>)(?:\\s)(\\S)|(\\S)(?:\\s)(<)/g, (_, p1, p2, p3, p4) => {\n      return p1 ? [p1, p2].join('') : [p3, p4].join('')\n    })\n  return tpl\n}\n", "import { html } from './html.ts'\nimport { dataTarget, dataTrigger } from './constants.ts'\nimport { TemplateProps } from './template.ts'\n/** @description wires attributes to templates with sensible escaping */\nexport interface Wire extends TemplateProps {\n  target?: string\n  triggers?: Record<string, string>\n}\nexport const wire = (obj: Wire) => {\n  const attributes = []\n  for (const prop in obj) {\n    const value = obj[prop]\n    if (value === undefined || value === null) continue\n    if (prop === 'target') {\n      attributes.push(`${dataTarget}=\"${value}\"`)\n      continue\n    }\n    if (prop === 'triggers') {\n      attributes.push(\n        `${dataTrigger}=\"${\n          Object.entries(value as unknown as Record<string, string>)\n            .map<string>(([ev, req]) => `${ev}->${req}`)\n            .join(' ')\n        }\"`,\n      )\n      continue\n    }\n    if (prop === 'className') {\n      attributes.push(`class=\"${value}\"`)\n      continue\n    }\n    if (prop === 'htmlFor') {\n      attributes.push(`for=\"${value}\"`)\n      continue\n    }\n    if (!prop.startsWith('aria') && !value) continue\n    if (!prop.startsWith('aria') && typeof value === 'boolean') {\n      attributes.push(html`$${prop}`)\n      continue\n    }\n    attributes.push(html`${prop}=\"$${value?.toString()}\"`)\n  }\n  return attributes.join(' ')\n}\n", "export type TemplateProps = {\n  className?: string\n  htmlFor?: string\n  for?: never\n  class?: never\n  [key: string]: unknown\n}\n\nexport interface Template<T extends TemplateProps = TemplateProps> {\n  (this: unknown, props: T & TemplateProps): string\n  stylesheets: Set<string>\n}\n\nconst shallowCompare = (\n  obj1: Record<string, unknown>,\n  obj2: Record<string, unknown>,\n) =>\n  Object.keys(obj1).length === Object.keys(obj2).length &&\n  Object.keys(obj1).every((key) =>\n    Object.hasOwn(obj2, key) && obj1[key] === obj2[key]\n  )\n/**\n * Forked from https://github.com/alexreardon/memoize-one\n * In this mode we constrain arguments to a single props object that extends TemplateProps\n * We also do a basic shallow comparison on the object to cache function result.\n */\nexport const template = <Props extends TemplateProps = TemplateProps>(\n  resultFn: (this: unknown, props: Props & TemplateProps) => string,\n): Template<Props> => {\n  let cache: {\n    lastThis: ThisParameterType<typeof resultFn>\n    lastProps: Props & TemplateProps\n    lastResult: ReturnType<typeof resultFn>\n  } | null = null\n  function tpl(\n    this: ThisParameterType<typeof resultFn>,\n    props: Parameters<typeof resultFn>[0],\n  ): string {\n    if (\n      cache && cache.lastThis === this && shallowCompare(props, cache.lastProps)\n    ) {\n      return cache.lastResult\n    }\n    const lastResult = resultFn.call(this, props)\n    cache = {\n      lastResult,\n      lastProps: props,\n      lastThis: this,\n    }\n    return lastResult\n  }\n  tpl.stylesheets = new Set<string>()\n  return tpl\n}\n", "import { html } from './html.ts'\nimport { Wire, wire } from './wire.ts'\nimport { template } from './template.ts'\n\ninterface IslandTemplateProps extends Wire {\n  tag: string\n  template: string\n  /** @defaultValue 'open' */\n  mode?: 'open' | 'closed'\n  stylesheets?: string | string[]\n}\n\nexport const IslandTemplate = template<IslandTemplateProps>(({\n  tag,\n  template,\n  mode = 'open',\n  stylesheets,\n  ...rest\n}) => {\n  const sheets = Array.isArray(stylesheets)\n    ? [...new Set(stylesheets)]\n    : stylesheets\n  return html`\n  <${tag} ${wire({ ...rest })}>\n    <template shadowroot=\"${mode}\">\n      ${stylesheets && html`<style>${sheets}</style>`}\n      ${template}\n    </template>\n  </${tag}>\n  `\n})\n", "import { html, IslandTemplate, template } from '$plaited'\n\nconst valueDisplay = IslandTemplate({\n  tag: 'value-display',\n  stylesheets: `h1 { color: purple; }`,\n  template:\n    html`<h1 data-target=\"display\" class=\"display\" data-trigger=\"click->test\">00:00</h1>`,\n})\n\nconst keyPad = IslandTemplate({\n  tag: 'key-pad',\n  template: html`<div class=\"keypad\">\n    <div>\n      <button class=\"number-button\" data-trigger=\"click->number\" value=\"1\">1</button>\n      <button class=\"number-button\" data-trigger=\"click->number\" value=\"2\">2</button>\n      <button class=\"number-button\" data-trigger=\"click->number\" value=\"3\">3</button>\n      <button class=\"number-button\" data-trigger=\"click->number\" value=\"4\">4</button>\n      <button class=\"number-button\" data-trigger=\"click->number\" value=\"5\">5</button>\n      <button class=\"number-button\" data-trigger=\"click->number\" value=\"6\">6</button>\n      <button class=\"number-button\" data-trigger=\"click->number\" value=\"7\">7</button>\n      <button class=\"number-button\" data-trigger=\"click->number\" value=\"8\">8</button>\n      <button class=\"number-button\" data-trigger=\"click->number\" value=\"9\">9</button>\n      <button class=\"number-button\" data-trigger=\"click->number\" value=\"0\">0</button>\n    </div>\n    <button class=\"clear-button\" data-trigger=\"click->clear\">Clear</button>\n  </div>`,\n})\n\nexport const CalculatorTemplate = template(() => html`${valueDisplay}${keyPad}`)\n", "import { Story, StoryConfig } from '$plaited'\nimport { CalculatorTemplate } from './calculator.template.ts'\n\nexport default {\n  title: 'examples/calculator',\n  template: CalculatorTemplate,\n  description:\n    'Example of using Island Template template and workers to exercise the islandly library',\n} as StoryConfig\n\nexport const Calculator: Story = {\n  description: 'a calculator consisting of two islands and worker',\n}\n"],
  "mappings": "AAEA,IAAM,MAAS,KACf,IACK,UAEI,CACL,CAAC,GAAG,EAAG,CAAC,GAAG,MAAM,CACnB,GAGW,QAAU,MAAM,SAAS,EACzB,MAAQ,MAAM,OAAO,ECZ3B,IAAM,WAAa,cACb,YAAc,eCDpB,IAAM,WAAc,KACzB,OAAO,UAAU,SAAS,KAAK,GAAG,EAAE,MAAM,EAAG,EAAE,EAAE,YAAY,ECD/D,IAAM,SAAW,WAEjB,IAAM,UAAY,CAChB,IAAK,QACL,IAAK,OACL,IAAK,OACL,IAAM,QACN,IAAK,QACP,EAaA,GAAM,CAAE,OAAQ,EAAI,GAOP,OAAU,KACrB,QAAQ,KACN,IACA,SACC,KAAQ,UAAU,GAA6B,CAClD,ECjCK,IAAM,WAAa,IAAI,IAC9B,QAAS,EAAI,EAAG,GAAK,EAAG,GAAK,IAAM,CACjC,EAAI,KAAK,MAAM,EAAI,GAAG,EAAI,IAE1B,IAAM,KADQ,KAAK,MAAM,EAAI,GAAG,EACX,OAAS,SAAS,EAAE,EAAE,OAAO,EAAE,EAAE,YAAY,EAClE,WAAW,IAAI,EAAG,GAAG,EC4BvB,IAAM,iBAAoB,KAAgB,IAAI,QAAQ,cAAe,GAAG,EAElE,SAAY,KAChB,WAAW,GAAG,IAAM,UACpB,WAAW,GAAG,IAAM,SAET,qBAAuB,CAClC,WACG,cACA,CACH,GAAM,CAAE,GAAI,EAAI,QACZ,OAAS,YAAY,OAAe,CAAC,IAAK,MAAO,IAAM,CACzD,KAAO,iBAAiB,IAAI,CAAC,CAAC,EAC9B,IAAI,cAAgB,MAAM,QAAQ,KAAK,EACnC,MAAM,OAAO,QAAQ,EAAE,KAAK,EAAE,EAC9B,SAAS,KAAK,EACd,MACA,GACJ,OAAI,IAAI,SAAS,GAAG,IAClB,cAAgB,OAAO,aAAuB,EAC9C,IAAM,IAAI,MAAM,EAAG,EAAE,GAEhB,IAAM,aACf,EAAG,EAAE,EACL,OAAO,QAAU,iBAAiB,IAAI,IAAI,OAAS,CAAC,CAAC,CACvD,ECzDA,IAAM,kBAAN,KAAwB,CAEtB,YAAY,SAA+B,CACzC,KAAK,SAAW,QAClB,CACA,YAAY,IAAY,CACtB,KAAK,SAAS,GAAG,CACnB,CACF,EAEM,UAAY,IAAI,QAET,kBAAoB,OAAO,OAAO,CAC7C,IAAK,CAAC,QAAkB,WAAkC,CACxD,UAAU,IAAI,QAAS,IAAI,kBAAkB,QAAQ,CAAC,CACxD,EACA,IAAM,SAAqB,UAAU,IAAI,OAAO,EAChD,IAAM,SAAqB,UAAU,IAAI,OAAO,CAClD,CAAC,ECfM,IAAM,KAAO,CAClB,WACG,cAEY,qBAAqB,QAAS,GAAG,WAAW,EAExD,KAAK,EACL,QAAQ,YAAa,GAAG,EACxB,QACC,2BACA,CAAC,EAAG,GAAI,KAAO,GAAK,CAAC,GAAI,EAAE,EAAE,KAAK,GAAG,EAAI,IAC3C,EACC,QAAQ,+BAAgC,CAAC,EAAG,GAAI,GAAI,GAAI,KAChD,GAAK,CAAC,GAAI,EAAE,EAAE,KAAK,EAAE,EAAI,CAAC,GAAI,EAAE,EAAE,KAAK,EAAE,CACjD,ECVE,IAAM,KAAQ,KAAc,CACjC,IAAM,WAAa,CAAC,EACpB,QAAW,QAAQ,IAAK,CACtB,IAAM,MAAQ,IAAI,IAAI,EACtB,GAA2B,OAAU,KACrC,IAAI,OAAS,SAAU,CACrB,WAAW,KAAK,GAAG,eAAe,QAAQ,EAC1C,SAEF,GAAI,OAAS,WAAY,CACvB,WAAW,KACT,GAAG,gBACD,OAAO,QAAQ,KAA0C,EACtD,IAAY,CAAC,CAAC,GAAI,GAAG,IAAM,GAAG,OAAO,KAAK,EAC1C,KAAK,GAAG,IAEf,EACA,SAEF,GAAI,OAAS,YAAa,CACxB,WAAW,KAAK,UAAU,QAAQ,EAClC,SAEF,GAAI,OAAS,UAAW,CACtB,WAAW,KAAK,QAAQ,QAAQ,EAChC,SAEF,GAAI,GAAC,KAAK,WAAW,MAAM,GAAK,CAAC,OACjC,IAAI,CAAC,KAAK,WAAW,MAAM,GAAK,OAAO,OAAU,UAAW,CAC1D,WAAW,KAAK,QAAQ,MAAM,EAC9B,SAEF,WAAW,KAAK,OAAO,UAAU,OAAO,SAAS,IAAI,IAEvD,OAAO,WAAW,KAAK,GAAG,CAC5B,EC9BA,IAAM,eAAiB,CACrB,KACA,OAEA,OAAO,KAAK,IAAI,EAAE,SAAW,OAAO,KAAK,IAAI,EAAE,QAC/C,OAAO,KAAK,IAAI,EAAE,MAAO,KACvB,OAAO,OAAO,KAAM,GAAG,GAAK,KAAK,GAAG,IAAM,KAAK,GAAG,CACpD,EAMW,SACX,UACoB,CACpB,IAAI,MAIO,KACX,SAAS,IAEP,MACQ,CACR,GACE,OAAS,MAAM,WAAa,MAAQ,eAAe,MAAO,MAAM,SAAS,EAEzE,OAAO,MAAM,WAEf,IAAM,WAAa,SAAS,KAAK,KAAM,KAAK,EAC5C,aAAQ,CACN,WACA,UAAW,MACX,SAAU,IACZ,EACO,UACT,CACA,WAAI,YAAc,IAAI,IACf,GACT,ECzCO,IAAM,eAAiB,SAA8B,CAAC,CAC3D,IACA,SAAAA,UACA,KAAO,OACP,YACA,GAAG,IACL,IAAM,CACJ,IAAM,OAAS,MAAM,QAAQ,WAAW,EACpC,CAAC,GAAG,IAAI,IAAI,WAAW,CAAC,EACxB,YACJ,OAAO;AAAA,KACJ,OAAO,KAAK,CAAE,GAAG,IAAK,CAAC;AAAA,4BACA;AAAA,QACpB,aAAe,cAAc;AAAA,QAC7BA;AAAA;AAAA,MAEF;AAAA,GAEN,CAAC,EC5BD,IAAM,aAAe,eAAe,CAClC,IAAK,gBACL,YAAa,wBACb,SACE,qFACJ,CAAC,EAEK,OAAS,eAAe,CAC5B,IAAK,UACL,SAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAeZ,CAAC,EAEY,mBAAqB,SAAS,IAAM,OAAO,eAAe,QAAQ,ECzB/E,IAAO,2BAAQ,CACb,MAAO,sBACP,SAAU,mBACV,YACE,wFACJ,EAEa,WAAoB,CAC/B,YAAa,mDACf",
  "names": ["template"]
}
