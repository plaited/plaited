// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`token group 1`] = `
":host {
  --pl-line-height-xxs: 0.25rem;
}
"
`;

exports[`token group 2`] = `
"export const lineHeightXxs = "var(--pl-line-height-xxs)"
"
`;

exports[`nested token group 1`] = `
":host {
  --pl-colors-gray-10: oklch(97.91% 0 0 / none);
}
"
`;

exports[`nested token group 2`] = `
"export const colorsGray10 = "var(--pl-colors-gray-10)"
"
`;

exports[`context: [media-query] 1`] = `
":host {
  --pl-size-dynamic-100: 3rem;
}
@media screen and (min-width: 1024px) {
  :host {
    --pl-size-dynamic-100: 3rem;
  }
}
:host([data-media-query="desktop"]) {
  --pl-size-dynamic-100: 3rem;
}
@media screen and (min-width: 1920px) {
  :host {
    --pl-size-dynamic-100: 4rem;
  }
}
:host([data-media-query="tv"]) {
  --pl-size-dynamic-100: 4rem;
}
@media screen and (max-width: 767px) {
  :host {
    --pl-size-dynamic-100: 2rem;
  }
}
:host([data-media-query="mobile"]) {
  --pl-size-dynamic-100: 2rem;
}
"
`;

exports[`context: [media-query] 2`] = `
"export const sizeDynamic100 = "var(--pl-size-dynamic-100)"
"
`;

exports[`context: [color-scheme] 1`] = `
":host {
  --pl-colors-background-primary: oklch(100% 0 0 / 0.5);
}
@media (prefers-color-scheme: light) {
  :host {
    --pl-colors-background-primary: oklch(100% 0 0 / 0.5);
  }
}
:host([data-color-scheme="light"]) {
  --pl-colors-background-primary: oklch(100% 0 0 / 0.5);
}
@media (prefers-color-scheme: dark) {
  :host {
    --pl-colors-background-primary: oklch(0% 0 0 / 0.5);
  }
}
:host([data-color-scheme="dark"]) {
  --pl-colors-background-primary: oklch(0% 0 0 / 0.5);
}
"
`;

exports[`context: [color-scheme] 2`] = `
"export const colorsBackgroundPrimary = "var(--pl-colors-background-primary)"
"
`;

exports[`context: [media-query, color-scheme] 1`] = `
"@media screen and (min-width: 1920px) {
  :host {
    --pl-size-dynamic-100: 4rem;
  }
}
:host([data-media-query="tv"]) {
  --pl-size-dynamic-100: 4rem;
}
@media screen and (max-width: 767px) {
  :host {
    --pl-size-dynamic-100: 2rem;
  }
}
:host([data-media-query="mobile"]) {
  --pl-size-dynamic-100: 2rem;
}
:host {
  --pl-size-dynamic-100: 3rem;
  --pl-colors-background-primary: oklch(100% 0 0 / 0.5);
}
@media screen and (min-width: 1024px) {
  :host {
    --pl-size-dynamic-100: 3rem;
  }
}
:host([data-media-query="desktop"]) {
  --pl-size-dynamic-100: 3rem;
}
@media (prefers-color-scheme: light) {
  :host {
    --pl-colors-background-primary: oklch(100% 0 0 / 0.5);
  }
}
:host([data-color-scheme="light"]) {
  --pl-colors-background-primary: oklch(100% 0 0 / 0.5);
}
@media (prefers-color-scheme: dark) {
  :host {
    --pl-colors-background-primary: oklch(0% 0 0 / 0.5);
  }
}
:host([data-color-scheme="dark"]) {
  --pl-colors-background-primary: oklch(0% 0 0 / 0.5);
}
"
`;

exports[`context: [media-query, color-scheme] 2`] = `
"export const sizeDynamic100 = "var(--pl-size-dynamic-100)"
export const colorsBackgroundPrimary = "var(--pl-colors-background-primary)"
"
`;

exports[`alias 1`] = `
":host {
  --pl-colors-gray-100: oklch(98.21% 0 0 / none);
  --pl-surface-secondary-100: var(--pl-colors-gray-100);
}
"
`;

exports[`alias 2`] = `
"export const colorsGray100 = "var(--pl-colors-gray-100)"
export const surfaceSecondary100 = "var(--pl-surface-secondary-100)"
"
`;

exports[`alias + context 1`] = `
":host {
  --pl-colors-white-100: oklch(97.91% 0 0 / none);
  --pl-colors-charcoal-100: oklch(18.31% 0.004 285.99 / none);
  --pl-surface-secondary-100: var(--pl-colors-white-100);
}
@media (prefers-color-scheme: light) {
  :host {
    --pl-surface-secondary-100: var(--pl-colors-white-100);
  }
}
:host([data-color-scheme="light"]) {
  --pl-surface-secondary-100: var(--pl-colors-white-100);
}
@media (prefers-color-scheme: dark) {
  :host {
    --pl-surface-secondary-100: var(--pl-colors-charcoal-100);
  }
}
:host([data-color-scheme="dark"]) {
  --pl-surface-secondary-100: var(--pl-colors-charcoal-100);
}
"
`;

exports[`alias + context 2`] = `
"export const colorsWhite100 = "var(--pl-colors-white-100)"
export const colorsCharcoal100 = "var(--pl-colors-charcoal-100)"
export const surfaceSecondary100 = "var(--pl-surface-secondary-100)"
"
`;

exports[`exercise token types 1`] = `
":host {
  --pl-font-weight: 700;
  --pl-letter-spacing: normal;
  --pl-font-size: 14px;
  --pl-line-height: 1.5;
  --pl-gradient: linear-gradient(
    45deg,
    oklch(0% 0 0 / 0.5) 20%,
    oklch(100% 0 0 / 0.5) 80%
  );
  --pl-font-family: Roboto, sans-serif;
  --pl-array-of-sizes: 60px 60px;
  --pl-string: primitive string;
  --pl-number: 50;
}
"
`;

exports[`exercise token types 2`] = `
"export const fontWeight = "var(--pl-font-weight)"
export const letterSpacing = "var(--pl-letter-spacing)"
export const fontSize = "var(--pl-font-size)"
export const lineHeight = "var(--pl-line-height)"
export const typography = {
  fontFamily: fontFamily,
  fontSize: fontSize,
  fontWeight: fontWeight,
  letterSpacing: letterSpacing,
  lineHeight: lineHeight,
}
export const gradient = "var(--pl-gradient)"
export const fontFamily = "var(--pl-font-family)"
export const arrayOfSizes = "var(--pl-array-of-sizes)"
export const string = "var(--pl-string)"
export const number = "var(--pl-number)"
"
`;

exports[`query methods 1`] = `
{
  "$description": "mock description",
  "$type": "color",
  "$value": {
    "c": 0,
    "h": 0,
    "l": "97.91%",
  },
  "dependencies": [],
  "dependents": [],
}
`;

exports[`query methods 2`] = `
[
  [
    "{colors.gray.10}",
    {
      "$description": "mock description",
      "$type": "color",
      "$value": {
        "c": 0,
        "h": 0,
        "l": "97.91%",
      },
      "dependencies": [],
      "dependents": [],
    },
  ],
  [
    "{colors.white.100}",
    {
      "$description": "mock description",
      "$type": "color",
      "$value": {
        "c": 0,
        "h": 0,
        "l": "97.91%",
      },
      "dependencies": [],
      "dependents": [],
    },
  ],
  [
    "{colors.charcoal.100}",
    {
      "$description": "mock description",
      "$type": "color",
      "$value": {
        "c": 0.004,
        "h": 285.99,
        "l": "18.31%",
      },
      "dependencies": [],
      "dependents": [],
    },
  ],
]
`;
